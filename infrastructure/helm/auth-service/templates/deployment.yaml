apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "auth-service.fullname" . }}
  labels: {{ include "auth-service.labels" . }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3001"
    prometheus.io/path: "/metrics"
    jaeger.io/inject: "true"
    vault.hashicorp.com/agent-inject: "true"
    vault.hashicorp.com/role: "auth-service"
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels: {{ include "auth-service.selectorLabels" . }}
  template:
    metadata:
      labels: {{ include "auth-service.selectorLabels" . }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3001"
        prometheus.io/path: "/metrics"
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      serviceAccountName: {{ include "auth-service.serviceAccountName" . }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels: {{ include "auth-service.selectorLabels" . }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 3001
          protocol: TCP
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: MFA_ENABLED
          value: "true"
        - name: RATE_LIMIT_WINDOW
          value: "300"
        - name: RATE_LIMIT_MAX_REQUESTS
          value: "100"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ include "auth-service.fullname" . }}-secrets
              key: jwt-secret
        - name: JWT_ALGORITHM
          value: {{ .Values.env.JWT_ALGORITHM }}
        - name: JWT_ISSUER
          value: {{ .Values.env.JWT_ISSUER }}
        - name: JWT_AUDIENCE
          value: {{ .Values.env.JWT_AUDIENCE }}
        - name: ENCRYPTION_ALGORITHM
          value: {{ .Values.env.ENCRYPTION_ALGORITHM }}
        - name: HASH_ALGORITHM
          value: {{ .Values.env.HASH_ALGORITHM }}
        - name: SALT_ROUNDS
          value: {{ .Values.env.SALT_ROUNDS | quote }}
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        readinessProbe:
          httpGet:
            path: {{ .Values.probes.readiness.httpGet.path }}
            port: http
          initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
          successThreshold: {{ .Values.probes.readiness.successThreshold }}
          failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
        livenessProbe:
          httpGet:
            path: {{ .Values.probes.liveness.httpGet.path }}
            port: http
          initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
          successThreshold: {{ .Values.probes.liveness.successThreshold }}
          failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
        startupProbe:
          httpGet:
            path: {{ .Values.probes.startup.httpGet.path }}
            port: http
          initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
          periodSeconds: {{ .Values.probes.startup.periodSeconds }}
          timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
          successThreshold: {{ .Values.probes.startup.successThreshold }}
          failureThreshold: {{ .Values.probes.startup.failureThreshold }}
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: secrets
          mountPath: /app/secrets
          readOnly: true
      volumes:
      - name: tmp
        emptyDir: {}
      - name: config
        configMap:
          name: {{ include "auth-service.fullname" . }}-config
      - name: secrets
        secret:
          secretName: {{ include "auth-service.fullname" . }}-secrets
      terminationGracePeriodSeconds: 30
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}